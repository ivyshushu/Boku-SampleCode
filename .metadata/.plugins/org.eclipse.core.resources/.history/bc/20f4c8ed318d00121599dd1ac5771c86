package com.example.page;

import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;

public abstract class Page {
		protected WebDriver driver;
		private WebDriverWait wait;

		public Page(WebDriver d){
			this.driver = d;
			this.wait = new WebDriverWait(this.driver, 10);
		}


		public WebDriver getDriver() {
			return driver;
		}

		public WebDriverWait getWait() {
			return wait;
		}

	    public void getToUrl(String url) {
			this.driver.get(url);
		}

		public boolean isCurrentPage(String expectedTitle) {
			if(this.driver.getTitle().isEmpty()) {
				this.wait.until(new ExpectedCondition<String>() {
					@Override
					public String apply (WebDriver d) {
						return d.getTitle();
					}
				});
			}

			if(expectedTitle.equals(this.driver.getTitle()))
				return true;
			else
				return false;
		}


		public boolean isElementPresent(By by) {
			try {
				this.driver.findElement(by);
				return true;
			} catch(NoSuchElementException e) {
				return false;
			} catch(StaleElementReferenceException e) {
				return false;
			}
		}

		public boolean isElementVisible(By by) {
			try {
				this.driver.findElement(by).isDisplayed();
				return true;
			} catch(NoSuchElementException e) {
				return false;
			} catch(ElementNotVisibleException e) {
				return false;
			} catch(StaleElementReferenceException e) {
				return false;
			}
		}

		public ExpectedCondition<WebElement> visibilityOfElementLocated(final By by) {
			return new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					WebElement element = d.findElement(by);
					return element.isDisplayed() ? element : null;
				}
			};
		}

}
